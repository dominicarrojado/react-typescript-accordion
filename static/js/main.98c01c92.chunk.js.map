{"version":3,"sources":["components/AccordionItem.tsx","lib/hooks.ts","components/Accordion.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AccordionItem","data","isOpen","btnOnClick","contentRef","useRef","useState","height","setHeight","useEffect","contentEl","current","scrollHeight","className","onClick","title","style","ref","content","Accordion","items","currentIdx","setCurrentIdx","map","item","idx","currentValue","App","accordionItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SA2CeA,MAtCf,YAQI,IAPFC,EAOC,EAPDA,KACAC,EAMC,EANDA,OACAC,EAKC,EALDA,WAMMC,EAAaC,iBAAuB,MADzC,EAE2BC,mBAAS,GAFpC,mBAEMC,EAFN,KAEcC,EAFd,KAcD,OAVAC,qBAAU,WACR,GAAIP,EAAQ,CACV,IAAMQ,EAAwBN,EChBvBO,QDkBPH,EAAUE,EAAUE,mBAEpBJ,EAAU,KAEX,CAACN,IAGF,qBAAIW,UAAS,yBAAoBX,EAAS,SAAW,IAArD,UACE,oBAAIW,UAAU,uBAAd,SACE,wBAAQA,UAAU,qBAAqBC,QAASX,EAAhD,SACGF,EAAKc,UAGV,qBAAKF,UAAU,2BAA2BG,MAAO,CAAET,UAAnD,SACE,qBAAKU,IAAKb,EAAYS,UAAU,yBAAhC,SACGZ,EAAKiB,gB,MEXDC,MApBf,YAAgE,IAA3CC,EAA0C,EAA1CA,MAA0C,EACzBd,oBAAU,GADe,mBACtDe,EADsD,KAC1CC,EAD0C,KAM7D,OACE,oBAAIT,UAAU,YAAd,SACGO,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC,EAAD,CAEExB,KAAMuB,EACNtB,OAAQuB,IAAQJ,EAChBlB,WAAY,kBAXD,SAACsB,GAClBH,GAAc,SAACI,GAAD,OAAmBA,IAAiBD,EAAMA,GAAO,KAUvCtB,CAAWsB,KAHxBA,SCkDAE,MA9Df,WACE,IAAMC,EAAiB,CACrB,CACEb,MAAO,oBACPG,QACE,gCACE,8EADF,kMAIwC,8CAJxC,IAI8D,IAC5D,uCALF,oCAME,+BACE,uCACA,sCACA,6CAKR,CACEH,MAAO,oBACPG,QACE,gCACE,+EADF,kMAIgD,8CAJhD,IAIsE,IACpE,uCALF,oCAME,+BACE,uCACA,sCACA,6CAKR,CACEH,MAAO,oBACPG,QACE,gCACE,8EADF,kMAIwC,8CAJxC,IAI8D,IAC5D,uCALF,oCAME,+BACE,uCACA,sCACA,8CAOV,OACE,qBAAKL,UAAU,YAAf,SACE,cAAC,EAAD,CAAWO,MAAOQ,OC9CTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98c01c92.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { getRefValue } from '../lib/hooks';\nimport { AccordionData } from '../types';\nimport './AccordionItem.css';\n\nfunction AccordionItem({\n  data,\n  isOpen,\n  btnOnClick,\n}: {\n  data: AccordionData;\n  isOpen: boolean;\n  btnOnClick: () => void;\n}) {\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    if (isOpen) {\n      const contentEl = getRefValue(contentRef);\n\n      setHeight(contentEl.scrollHeight);\n    } else {\n      setHeight(0);\n    }\n  }, [isOpen]);\n\n  return (\n    <li className={`accordion-item ${isOpen ? 'active' : ''}`}>\n      <h2 className=\"accordion-item-title\">\n        <button className=\"accordion-item-btn\" onClick={btnOnClick}>\n          {data.title}\n        </button>\n      </h2>\n      <div className=\"accordion-item-container\" style={{ height }}>\n        <div ref={contentRef} className=\"accordion-item-content\">\n          {data.content}\n        </div>\n      </div>\n    </li>\n  );\n}\n\nexport default AccordionItem;\n","import { RefObject } from 'react';\n\nexport function getRefValue<C>(ref: RefObject<C>) {\n  return ref.current as C;\n}\n","import { useState } from 'react';\nimport { AccordionData } from '../types';\nimport AccordionItem from './AccordionItem';\nimport './Accordion.css';\n\nfunction Accordion({ items }: { items: Array<AccordionData> }) {\n  const [currentIdx, setCurrentIdx] = useState(-1);\n  const btnOnClick = (idx: number) => {\n    setCurrentIdx((currentValue) => (currentValue !== idx ? idx : -1));\n  };\n\n  return (\n    <ul className=\"accordion\">\n      {items.map((item, idx) => (\n        <AccordionItem\n          key={idx}\n          data={item}\n          isOpen={idx === currentIdx}\n          btnOnClick={() => btnOnClick(idx)}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport default Accordion;\n","import './App.css';\nimport Accordion from './components/Accordion';\n\nfunction App() {\n  const accordionItems = [\n    {\n      title: 'Accordion Item #1',\n      content: (\n        <div>\n          <strong>This is the first item's accordion body.</strong> It is hidden\n          by default, but shown when title is clicked. It will also be hidden if\n          the title is clicked again or when another item is clicked. You can\n          pass HTML tags in the content such as <u>underline tag</u>,{' '}\n          <i>italic</i>, or even another list like this:\n          <ul>\n            <li>Bread</li>\n            <li>Eggs</li>\n            <li>Milk</li>\n          </ul>\n        </div>\n      ),\n    },\n    {\n      title: 'Accordion Item #2',\n      content: (\n        <div>\n          <strong>This is the second item's accordion body.</strong> It is\n          hidden by default, but shown when title is clicked. It will also be\n          hidden if the title is clicked again or when another item is clicked.\n          You can pass HTML tags in the content such as <u>underline tag</u>,{' '}\n          <i>italic</i>, or even another list like this:\n          <ul>\n            <li>Bread</li>\n            <li>Eggs</li>\n            <li>Milk</li>\n          </ul>\n        </div>\n      ),\n    },\n    {\n      title: 'Accordion Item #3',\n      content: (\n        <div>\n          <strong>This is the third item's accordion body.</strong> It is hidden\n          by default, but shown when title is clicked. It will also be hidden if\n          the title is clicked again or when another item is clicked. You can\n          pass HTML tags in the content such as <u>underline tag</u>,{' '}\n          <i>italic</i>, or even another list like this:\n          <ul>\n            <li>Bread</li>\n            <li>Eggs</li>\n            <li>Milk</li>\n          </ul>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"container\">\n      <Accordion items={accordionItems} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}